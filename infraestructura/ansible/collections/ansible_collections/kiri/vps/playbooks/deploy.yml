---
# To run the playbook use this ansible-playbook kiri.vps.deploy --limit localhost
# <nameOfCollection> limit to only run on localhost
- name: Deploy applications to Docker Swarm
  hosts: all
  gather_facts: no
  vars:
    # Variables por defecto que pueden ser sobrescritas
    apps: []  # Lista de aplicaciones a desplegar
    env: dev  # Entorno por defecto
    venv_path: "{{ remote_dependency_role_path }}/files/.venv"
    collection_path: "{{ collection_dir }}/kiri/vps" 
    app_path: "{{ base_dir }}/app1"
  environment:
    # anade tus custom path, por defecto ansible no incluye home/kiri/.local en los path
    PATH: "/home/kiri/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  pre_tasks:
  - name: Install dependencies
    import_role:
      name: kiri.vps.dependency

  tasks:
    - name: Include application variables
      include_vars:
        file: "{{ app_path }}/pass.yml"
      
    - name: Debug venv path 
      ansible.builtin.debug:
        msg: {{ venv_path }}

    # - name: Include Vault credentials
    #   include_vars:
    #     # it also need to be relative
    #     file: "../var/vault.yml"

    # Construcción y publicación de la imagen Docker
    # - name: Check if Dockerfile exists
    #   ansible.builtin.stat:
    #     path: "{{ app_path }}/Dockerfile"
    #   register: dockerfile_exists

    # - name: Fail if Dockerfile doesn't exist
    #   ansible.builtin.fail:
    #     msg: "No se encontró el Dockerfile en {{ app_path }}/Dockerfile"
    #   when: not dockerfile_exists.stat.exists

    # - name: Login to Docker Hub
    #   community.docker.docker_login:
    #     username: "{{ dockerUsername }}"
    #     password: "{{ dockerPassword }}"
    #     config_path: "~/.docker/config.json"
    #     state: present
    #     reauthorize: yes
    #   environment:
    #     PATH: "{{ venv_path }}/bin:{{ ansible_env.PATH }}"
    #   vars:
    #     ansible_python_interpreter: "{{ venv_path }}/bin/python"

    # - name: Check Docker Hub login status
    #   ansible.builtin.shell: docker info | grep -q 'Username:'
    #   register: docker_logged_in
    #   changed_when: false
    #   failed_when: false
    #   ignore_errors: true

    # - name: Warn if not logged into Docker Hub
    #   ansible.builtin.debug:
    #     msg: "ADVERTENCIA: No parece estar autenticado en Docker Hub. El push de la imagen podría fallar."
    #   when: docker_logged_in.rc != 0

    # - name: Build Docker image
    #   community.docker.docker_image:
    #     name: "{{ imageName }}"
    #     tag: "{{ env }}"
    #     build:
    #       path: "{{ app_path }}"
    #       dockerfile: Dockerfile
    #       platform: linux/amd64  # Plataforma específica para tu VPS
    #     source: build
    #     push: false  # No publicar aún, solo construir localmente
    #   environment:
    #     PATH: "{{ venv_path }}/bin:{{ ansible_env.PATH }}"
    #   vars:
    #     ansible_python_interpreter: "{{ venv_path }}/bin/python"

    # - name: Tag image for Docker Hub
    #   community.docker.docker_image:
    #     name: "{{ imageName }}:{{ env }}"
    #     repository: "{{ imageName }}:{{ env }}"
    #     source: local
    #   environment:
    #     PATH: "{{ venv_path }}/bin:{{ ansible_env.PATH }}"
    #   vars:
    #     ansible_python_interpreter: "{{ venv_path }}/bin/python"

    # No funciona aunqe no tira nigun error
    # - name: Push Docker image
    #   command: |
    #     echo "{{ dockerPassword }}" | docker login -u {{ dockerUsername }} --password-stdin
    #     docker push kiri23/{{ imageName }}:{{ env }}

    # - name: Push image to Docker Hub
    #   community.docker.docker_image:
    #     name: "{{ imageName }}:{{ env }}"
    #     push: true
    #     source: local
    #   environment:
    #     PATH: "{{ venv_path }}/bin:{{ ansible_env.PATH }}"
    #   vars:
    #     ansible_python_interpreter: "{{ venv_path }}/bin/python"


    # - name: Ensure traefik-public network exists
    #   community.docker.docker_network:
    #     name: traefik-public
    #     driver: overlay
    #     attachable: yes
    #     state: present
    #   environment:
    #     PATH: "{{ venv_path }}/bin:{{ ansible_env.PATH }}"
    #   vars:
    #     ansible_python_interpreter: "{{ venv_path }}/bin/python"

    # - name: Generate docker-compose files for each application
    #   template:
    #     src: "{{ collection_path }}/templates/docker-compose-staging.yml.j2"
    #     dest: "{{ base_dir }}/templates/docker-compose-{{ appName }}-{{ env }}.yml"

    # - name: Deploy stack to Staging
    #   community.docker.docker_stack:
    #     state: present
    #     name: "{{env}}"
    #     compose:
    #       - "{{ base_dir }}/templates/docker-compose-{{ appName }}-{{ env }}.yml"
    #   environment:
    #     PATH: "{{ venv_path }}/bin:{{ ansible_env.PATH }}"
    #   vars:
    #     ansible_python_interpreter: "{{ venv_path }}/bin/python"