# DOCKER SWARM CONFIGURATION:
# This docker-compose.yml uses Docker Swarm specific syntax and features:
# - 'deploy' section with replicas and restart policies
# - Labels under 'deploy' section for Traefik in Swarm mode
# - To deploy: use 'docker stack deploy -c docker-compose.yml myapp'
# - NOT compatible with regular 'docker-compose up' command
# aqui estoy cogiendo y cambiandolo em texstatic
version: "3"

services:
  # watchtower no me funciono porque yo tengo mi imagen privada
  # y no puedo acceder a ella desde el contenedor de watchtower https://containrrr.dev/watchtower/private-registries/
  watchtower:
    image: containrrr/watchtower
    command:
      - "--label-enable"
      - "--interval"
      - "300"
      - "--cleanup"
      - "--debug"
      - "--trace"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
  reverse-proxy:
    image: traefik:v3.1
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
      # load the traefik.yml from the VPS server. For this to work, you need to scp the traefik.yml to the VPS server
      - /home/kiri/traefik.yml:/etc/traefik/traefik.yml
    ports:
      # 80 is the default port for http
      - "80:80"
      # 443 is the default port for https
      - "443:443"
      # 8080 is the default port for traefik enabled by api insecure true
      - "8080:8080"
  web:
    # watchtower only montitor images with the same tag
    image: kiri23/express:prod
    # deploy is a swarm specific feature. Used with docker stack deploy when deploying the stack
    deploy:
      #the label need to be under deploy so traefik can read it
      labels:
        - "traefik.enable=true" # enable traefik for this service
        - "traefik.http.routers.web.rule=Host(`kiri231.com`)" # route all traffic to this service
        - "traefik.http.routers.web.entrypoints=websecure" # accesible by https
        - "traefik.http.routers.web.tls.certresolver=myresolver"
        - "traefik.http.services.web-service.loadbalancer.server.port=3000" # specify the port
        - "com.centurylinklabs.watchtower.enable=true"
        - "com.centurylinklabs.watchtower.cleanup=true"
      replicas: 1 # have one instance running at a time
      restart_policy:
        condition: on-failure
        # update_config:
        # no funciona con docker compose , funciona con docker stack , docker service ...
        # order: start-first # rolling release, start new instance before stopping old one

volumes:
  letsencrypt:
