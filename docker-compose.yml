# DOCKER SWARM CONFIGURATION:
# This docker-compose.yml uses Docker Swarm specific syntax and features:
# - 'deploy' section with replicas and restart policies
# - Labels under 'deploy' section for Traefik in Swarm mode
# - To deploy: use 'docker stack deploy -c docker-compose.yml -c insfraestructura/compose/base.yml myapp'
# - The idea is to "compose" combine multiple docker compose files 
# - NOT compatible with regular 'docker-compose up' command
# aqui estoy cogiendo y cambiandolo em texstatic
version: "3"

services:
  app1:
    # watchtower only montitor images with the same tag
    image: kiri23/express:prod
    # deploy is a swarm specific feature. Used with docker stack deploy when deploying the stack
    deploy:
      #the label need to be under deploy so traefik can read it
      labels:
        - "traefik.enable=true" # enable traefik for this service
        - "traefik.http.routers.app1.rule=Host(`app1.kiri231.com`)" # route all traffic to this service
        - "traefik.http.routers.app1.entrypoints=websecure" # accesible by https
        - "traefik.http.routers.app1.tls.certresolver=myresolver"
        - "traefik.http.services.app1-service.loadbalancer.server.port=3000" # specify the port
        - "com.centurylinklabs.watchtower.enable=true"
        - "com.centurylinklabs.watchtower.cleanup=true"
      replicas: 1 # have one instance running at a time
      restart_policy:
        condition: on-failure
        # update_config:
        # no funciona con docker compose , funciona con docker stack , docker service ...
        # order: start-first # rolling release, start new instance before stopping old one
  app2:
    image: kiri23/app2:prod
    deploy:
      #the label need to be under deploy so traefik can read it
      labels:
        - "traefik.enable=true" # enable traefik for this service
        - "traefik.http.routers.app2.rule=Host(`app2.kiri231.com`)" # route all traffic to this service
        - "traefik.http.routers.app2.entrypoints=websecure" # accesible by https
        - "traefik.http.routers.app2.tls.certresolver=myresolver"
        - "traefik.http.services.app2-service.loadbalancer.server.port=3000" # specify the port
        - "com.centurylinklabs.watchtower.enable=true"
        - "com.centurylinklabs.watchtower.cleanup=true"
      replicas: 1 # have one instance running at a time
      restart_policy:
        condition: on-failure
        # update_config:
        # no funciona con docker compose , funciona con docker stack , docker service ...
        # order: start-first # rolling release, start new instance before stopping old one
  grafana:
    image: grafana/grafana:latest
    environment:
      # Muy importante: Decirle a Grafana que está detrás de un subpath
      - "GF_SERVER_ROOT_URL=https://kiri231.com/grafana"
      - "GF_SERVER_SERVE_FROM_SUB_PATH=true"
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`app1.kiri231.com`) && PathPrefix(`/grafana`)"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana.tls.certresolver=myresolver"
        - "traefik.http.services.grafana-service.loadbalancer.server.port=3000"
        - "traefik.http.routers.grafana.priority=100"  # Prioridad alta para rutas específicas
      replicas: 1
      restart_policy:
        condition: on-failure

